Data Types

    Every value in Rust is of a certain data type, which tells Rust what kind of data is being specified so it knows how to work with that data.
    We’ll look at two data type subsets: scalar and compound.

    Rust is a statically typed language, which means that it must know the types of all variables at compile time.
    The compiler can usually infer what type we want to use based on the value and how we use it.

    In cases when many types are possible, such as when we converted a String to a numeric type using parse :
        let chosen_number: u32 = "42".parse().expect("Not a number!");

    If we don’t add the type annotation here, Rust will display the following error,
    which means the compiler needs more information from us to know which type we want to use:

        error[E0282]: type annotations needed
        --> src/main.rs:2:9
        |
        2 |
        let guess = "42".parse().expect("Not a number!");
        |
        ^^^^^
        |
        |
        |
        cannot infer type for `_`
        |
        consider giving `guess` a type


Scalar Types

    A scalar type represents a single value. Rust has four primary scalar types:
        integers, floating-point numbers, Booleans, and characters.
    
    Integers

        Length  Signed  Unsigned
        8 bit   i8      u8
        arch    isize   usize

        Signed numbers are stored using two’s complement representation.
        Each signed variant can store numbers from −(2^(n − 1)) to 2^(n − 1) − 1.

        The isize and usize types depend on the kind of computer your program is running on:
            64 bits if you’re on a 64-bit architecture and
            32 bits if you’re on a 32-bit architecture.

        So if you use i64 on a 32 bit computer :
            On a 32-bit system, the CPU is not designed to handle 64-bit operations efficiently.
            64-bit data types like i64 will need to be processed in multiple steps, which could lead to inefficiencies.

            You won't run into overflow issues when using i64 on a 32-bit machine,
            but you will still be slower than using a smaller integer type like i32.
            
            The only issue arises when the 64-bit value exceeds the CPU’s handling speed or memory limitations.
        
        What Happens When You Need Large Values?

            If you need large numerical values that aren't related to memory addresses or indices 
            (like calculations that require values larger than what i32 or i64 can store),
            you should use fixed-size integers like i64 or u64, which are not architecture-dependent.

            Otherwise, isize, usize, etc are to make sure the right sized memory addressing for faster computation.
            
            isize and usize are not about storing arbitrarily large values,
            but are instead optimized for handling memory addresses and indexing in a portable way across different architectures.

    Floating Point 

        Rust also has two primitive types for floating-point numbers, which are numbers with decimal points.
        Rust’s floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively.

        Floating-point numbers are represented according to the IEEE-754 stan­dard.


    Booleans
    
        true.
        false.

    Character Type

        The char type is specified with single quotes, as opposed to strings, which use double quotes.
        
        Rust’s char type represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.
        Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust.
        Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive.


Compound Types

    Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.

    Tuple 

        A tuple is a general way of grouping together some number of other values with a variety of types into one compound type.
            fn main() {
                let tup: (i32, f64, u8) = (500, 6.4, 1);
            }       


        The variable tup binds to the entire tuple, because a tuple is considered a single compound element.
        To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:
            fn main() {
                let tup = (500, 6.4, 1);
                let (x, y, z) = tup;
                println!("The value of y is: {}", y);
            }
        This program first creates a tuple and binds it to the variable tup.
        It then uses a pattern with let to take tup and turn it into three separate variables x, y, and z.
        This is called destructuring, because it breaks the single tuple into three parts.


        we can access a tuple element directly by using a period ( .) followed by the index of the value we want to access. For example:
            fn main() {
                let x: (i32, f64, u8) = (500, 6.4, 1);
                let five_hundred = x.0;
                let six_point_four = x.1;
                let one = x.2;
            }
    
    Array 

        Unlike tuples, The data type of elements of an array must be the same.
            fn main() {
                let a = [1, 2, 3, 4, 5];
                let first = a[0];
                let second = a[1];
            }     
        
        Arrays are useful when you want your data allocated on the stack rather than the heap.
        Or when you want to ensure you always have a fixed number of elements.

        An array isn’t as flexible as the vector type, though.
        A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size.
        If you’re unsure whether to use an array or a vector, you should probably use a vector.

        our_array.len() to find array length.


