Ownership

    Ownership is Rust’s most unique feature.
    It enables Rust to make memory safety guarantees without needing a garbage collector.

    All programs have to manage the way they use a computer’s memory while running.
        
        Some languages have garbage collection that constantly looks for no longer used memory as the program runs.
        
        In other languages, the programmer must explicitly allocate and free the memory.
        
        Rust uses a third approach:
            
            Memory is managed through a system of ownership with a set of rules that the compiler checks at compile time. 
            None of the ownership features slow down your program while it’s running.
        

    *Note* Stack and Heap


        In many programming languages, you don’t have to think about the stack and
        the heap very often. But in a systems programming language like Rust, whether
        a value is on the stack or the heap has more of an effect on how the language
        behaves and why you have to make certain decisions. Parts of ownership will
        be described in relation to the stack and the heap later in this chapter, so here
        is a brief explanation in preparation.
        Both the stack and the heap are parts of memory that is available to your
        code to use at runtime, but they are structured in different ways. The stack stores
        values in the order it gets them and removes the values in the opposite order. This
        is referred to as last in, first out. Think of a stack of plates: when you add more
        plates, you put them on top of the pile, and when you need a plate, you take
        one off the top. Adding or removing plates from the middle or bottom wouldn’t
        work as well! Adding data is called pushing onto the stack, and removing data
        is called popping off the stack.
        The stack is fast because of the way it accesses the data: it never has to
        search for a place to put new data or a place to get data from because that
        place is always the top. Another property that makes the stack fast is that all
        data on the stack must take up a known, fixed size.
        Data with a size unknown at compile time or a size that might change can
        be stored on the heap instead. The heap is less organized: when you put data
        on the heap, you ask for some amount of space. The operating system finds
        an empty spot somewhere in the heap that is big enough, marks it as being in
        use, and returns a pointer, which is the address of that location. This process
        is called allocating on the heap, sometimes abbreviated as just “allocating.”
        Pushing values onto the stack is not considered allocating. Because the pointer
        is a known, fixed size, you can store the pointer on the stack, but when you
        want the actual data, you have to follow the pointer.
        Think of being seated at a restaurant. When you enter, you state the num-
        ber of people in your group, and the staff finds an empty table that fits every-
        one and leads you there. If someone in your group comes late, they can ask
        where you’ve been seated to find you.
        Accessing data in the heap is slower than accessing data on the stack
        because you have to follow a pointer to get there. Contemporary processors are
        faster if they jump around less in memory. Continuing the analogy, consider a
        server at a restaurant taking orders from many tables. It’s most efficient to get all
        the orders at one table before moving on to the next table. Taking an order from
        table A, then an order from table B, then one from A again, and then one from
        B again would be a much slower process. By the same token, a processor can
        do its job better if it works on data that’s close to other data (as it is on the stack)
        rather than farther away (as it can be on the heap). Allocating a large amount of
        space on the heap can also take time.
        When your code calls a function, the values passed into the function
        (including, potentially, pointers to data on the heap) and the function’s local
        variables get pushed onto the stack. When the function is over, those values
        get popped off the stack.
        Keeping track of what parts of code are using what data on the heap,
        minimizing the amount of duplicate data on the heap, and cleaning up unused
        data on the heap so you don’t run out of space are all problems that ownership
        addresses. Once you understand ownership, you won’t need to think about the
        stack and the heap very often, but knowing that managing heap data is why
        ownership exists can help explain why it works the way it does.


    Ownership Rules 

        1. Each value in Rust has a variable that’s called its owner.
        2. There can be only one owner at a time.
        3. When the owner goes out of scope, the value will be dropped.
    

        As a first example of ownership, we’ll look at the scope of some variables.
        A scope is the range within a program for which an item is valid.
        
            {
                //s is not valid here.
                let s = "you brokie" ;

                //do stuff with s.
            }   //s goes out of scope, and s is no longer valid.

        In other words, there are two important points in time here:
            
            1. When s comes into scope, it is valid.
            2. It remains valid until it goes out of scope.
        
        We’ve already seen string literals, where a string value is hardcoded into our program.
        String literals are convenient, but they aren’t suitable for every situation in which we may want to use text.
        One reason is that they’re immutable.
        Another is that not every string value can be known when we write our code.
        For example, what if we want to take user input and store it?
        For these situations, Rust has a second string type, String.
        This type is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time.
        You can create a String from a string literal using the from function, like so:
            
            let s = String::from("hello");

        This kind of string can be mutated:
            
            let mut s = String::from("hello");
            s.push_str(", world!"); // push_str() appends a literal to a String
            println!("{}", s); // this will print `hello, world!`

        So, what’s the difference here? Why can String be mutated but literals cannot?
        The difference is how these two types deal with memory.

    
    Memory and  Allocation 

        With string literals, We know the contents at compile time, So the text is hardcoded directly into the final executable.
        This is why string literals are fast and efficient.
        But these properties only come from the string literal’s immutability.
        We can’t put a blob of memory into the binary for each piece of text whose size is unknown at compile time.
        And whose size might change while running the program.
        
        With the String type, in order to support a mutable, growable piece of text,
        We need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents.
        This means:
            
            1. The memory must be requested from the operating system at runtime.
            2. We need a way of returning this memory to the operating system when we’re done with our String.
        
        That first part is done by us
        
            When we call String::from, its implementation requests the memory it needs.
            This is pretty much universal in programming languages.

        However, the second part is different.
        
            In languages with a garbage collector (GC), the GC keeps track and cleans up memory that isn’t being used anymore.
            And we don’t need to think about it. 
            
            Without a GC, it’s our job to identify when memory is no longer being used and call code to explicitly return it, just as we did to request it.
            Doing this correctly has historically been a difficult programming problem.
            If we forget, we’ll waste memory.
            If we do it too early, we’ll have an invalid variable.
            If we do it twice, that’s a bug too.
            We need to pair exactly one allocate with exactly one free.
        
        Rust takes a different path
        
            The memory is automatically returned once the variable that owns it goes out of scope.

                {
                    let s = String::from("hello"); // s is valid from this point forward
                    // do stuff with s
                } // this scope is now over, and s is no longer valid

            There is a natural point at which we can return the memory our String needs to the operating system
                
                When s goes out of scope.
            
            When a variable goes out of scope, Rust calls a special function for us.
            This function is called drop, and it’s where the author of String can put the code to return the memory.
            Rust calls drop automatically at the closing curly bracket.

            *NOTE*
                In C++, this pattern of deallocating resources at the end of an item’s lifetime is some-
                times called Resource Acquisition Is Initialization (RAII). The drop function in
                Rust will be familiar to you if you’ve used RAII patterns.
            
    
    Ways That Variables and Data Interact: Move

            let x = 5;
            let y = x;
        
        We can probably guess what this is doing
        
            “bind the value 5 to x; then make a copy of the value in x and bind it to y.”
            We now have two variables, x and y, and both equal 5.
        
        This is indeed what is happening, because integers are simple values with a known, fixed size.
        And these two 5 values are pushed onto the stack.


            let s1 = String::from("hello");
            let s2 = s1;

        The same thing ? Hell No !

        A String is made up of three parts

            On the left :

                1. A pointer to the memory that holds the contents of the string.
                2. A length.
                3. A capacity.

                This group of data is stored on the stack.

            On the right is the memory (actual physical memory) on the heap that holds the contents.
        
        So the heap data on the right is NOT copied. Only the string data on the left is copied.

            Length : How much memory in bytes the contents of the string are using.
            Capacity : How much memory was allocated by the OS.

        When a variable goes out of scope, Rust automatically calls the drop function and cleans up the heap memory for that variable.
        This is a problem. When s2 and s1 go out of scope, they will both try to free the same memory.
        This is known as a double free error and is one of the memory safety bugs wned previously.
        Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.

        To ensure memory safety, there’s one more detail to what happens in this situation in Rust.
        Instead of trying to copy the allocated memory, Rust considers s1 to no longer be valid
        Therefore, Rust doesn’t need to free anything when s1 goes out of scope.
        
            Check out what happens when you try to use s1 after s2 is created; it won’t work

                let s1 = String::from("hello");
                let s2 = s1;
                println!("{}, world!", s1);
            
            It shows an error

                error[E0382]: use of moved value: `s1`
                --> src/main.rs:5:28
                    |
                3   | let s2 = s1;
                    |    -- value moved here
                4   |
                5   |  println!("{}, world!", s1);
                    |       ^^ value used here after move
                    |
                = note: move occurs because `s1` has type `std::string::String`, which does
                not implement the `Copy` trait

        If you’ve heard the terms shallow copy and deep copy.
        The concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy.
        But because Rust also invalidates the first variable, instead of being called a shallow copy, it’s known as a move.
        In this example, we would say that s1 was moved into s2.

        In addition, there’s a design choice that’s implied by this
        
            Rust wil never automatically create “deep” copies of your data.
            Therefore, any automatic copying can be assumed to be inexpensive in terms of runtime performance.

    Ways That Variables and Data Interact: Clone

        If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone.
        
            let s1 = String::from("hello");
            let s2 = s1.clone();
            println!("s1 = {}, s2 = {}", s1, s2);

    
    Stack-Only Data: Copy

        There’s another wrinkle we haven’t talked about yet.
             
            let x = 5;
            let y = x;
            println!("x = {}, y = {}", x, y);

        But this code seems to contradict what we just learned
        
            We don’t have a call to clone, but x is still valid and wasn’t moved into y.
            
            The reason is that types such as integers that have a known size at compile time are stored entirely on the stack,
            so copies of the actual values are quick to make.
            
            That means there’s no reason we would want to prevent x from being valid after we create the variable y.
            
            In other words, there’s no difference between deep and shallow copying here,
            so calling clone wouldn’t do anything different from the usual shallow copying and we can leave it out.

        
        Rust has a special annotation called Copy trait that we can place on types like integers that are stored on the stack.
        If a type has the Copy trait, an older variable is still usable after assignment.

            Here are some of the types that are Copy

                1. All the integer types, such as u32.
                2. The Boolean type, bool, with values true and false.
                3. The character type, char.
                4. All the floating point types, such as f64.
                5. Tuples, but only if they contain types that are also Copy. (i32, i32) is Copy, but (i32, String) is not.

        
            Wonderful Example 

                fn main() {
                    let s = String::from("hello"); // s comes into scope.
                    takes_ownership(s); // s's value moves into the function and so is no longer valid after it.
                    
                    let x = 5; // x comes into scope
                    makes_copy(x); // x would move into the function, but i32 is Copy, so it's okay to still use x afterward
                    
                } // Here, x goes out of scope, then s. But because s's value was moved, nothing special happens.


                fn takes_ownership(some_string: String) { // some_string comes into scope
                    println!("{}", some_string);

                } // Here, some_string goes out of scope and `drop` is called. The backing memory is freed.
                    
                fn makes_copy(some_integer: i32) { // some_integer comes into scope
                    println!("{}", some_integer);

                } // Here, some_integer goes out of scope. Nothing special happens.


    Return Values and Scope
        
        Returning values can also transfer ownership.

            fn main() {
                let s1 = gives_ownership(); // gives_ownership moves its return value into s1
                
                let s2 = String::from("hello"); // s2 comes into scope
               
                let s3 = takes_and_gives_back(s2);  // s2 is moved into takes_and_gives_back, which also moves its return value into s3
            } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was moved, so nothing happens. s1 goes out of scope and is dropped.
                
                
            fn gives_ownership() -> String { // gives_ownership will move its return value into the function that calls it.
                let some_string = String::from("hello"); // some_string comes into scope
                some_string // some_string is returned and moves out to the calling function.
            } 

            // takes_and_gives_back will take a String and return one
            fn takes_and_gives_back(a_string: String) -> String { // a_string comes into scope.
                a_string  // a_string is returned and moves out to the calling function.
            } 


        The ownership of a variable follows the same pattern every time
        
            Assigning a value to another variable moves it.
            
            When a variable that includes data on the heap goes out of scope,
            the value will be cleaned up by drop unless the data has been moved to be owned by another variable.

        
        Returning Multiple Values from a function

            fn main() {
                let s1 = String::from("hello");
                let (s2, len) = calculate_length(s1);
                println!("The length of '{}' is {}.", s2, len);
            }

            fn calculate_length(s: String) -> (String, usize) {
                let length = s.len();  // len() returns the length of a String
                (s, length)
            }

        Taking ownership and then returning ownership with every function is a bit tedious.
        What if we want to let a function use a value but not take ownership?
        
        It’s quite annoying that anything we pass in also needs to be passed back if we want to use it again,
        in addition to any data resulting from the body of the function that we might want to return as well.

        Luckily for us, Rust has a feature for this concept, called references.

    References and Burrowing

        Take a look 

            fn main() {
                let s1 = String::from("hello");
                let len = calculate_length(&s1);
                println!("The length of '{}' is {}.", s1, len);
            }

            fn calculate_length(s: &String) -> usize {
                s.len() // Here, s goes out of scope. But because it does not have ownership of what it refers to, nothing happens.
            }
        
        These ampersands are references, and they allow you to refer to some value without taking ownership of it.
        The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator, *.

        The &s1 syntax lets us create a reference that refers to the value of s1 but does not own it.
        Because it does not own it, the value it points to will not be dropped when the reference goes out of scope.

        We don’t need to return the values in order to give back ownership, because we never had ownership.

        We call having references as function parameters borrowing.
        As in real life, if a person owns something, you can borrow it from them.
        When you’re done, you have to give it back.

        Just as variables are immutable by default, so are references.
        We’re not allowed to modify something we have reference to. 

    
    Mutable References

        fn main() {
            let mut s = String::from("hello");
            change(&mut s);
        }

        fn change(some_string: &mut String) {
            some_string.push_str(", world");
        }

        But mutable references have one big restriction
        
            you can have only one mutable reference to a particular piece of data in a particular scope.
            This code will fail:

                let mut s = String::from("hello");
                let r1 = &mut s;
                let r2 = &mut s;

            Here’s the error:
                
                error[E0499]: cannot borrow `s` as mutable more than once at a time
         
        This restriction allows for mutation but in a very controlled fashion.


        The benefit of having this restriction is that Rust can prevent data races at compile time.
        
        A data race is similar to a race condition and happens when these three behaviors occur
            
            1. Two or more pointers access the same data at the same time.
            2. At least one of the pointers is being used to write to the data.
            3. There’s no mechanism being used to synchronize access to the data.

        As always, we can use curly brackets to create a new scope, allowing for multiple mutable references, just not simultaneous ones:

            let mut s = String::from("hello");
            
            {
                let r1 = &mut s;
            } // r1 goes out of scope here, so we can make a new reference with no problems.
            
            let r2 = &mut s;

        A similar rule exists for combining mutable and immutable references. This code results in an error

            let mut s = String::from("hello");
            let r1 = &s; // no problem
            let r2 = &s; // no problem
            let r3 = &mut s; // BIG PROBLEM
        
        Here’s the error:
            
            error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable

        Whew! We also cannot have a mutable reference while we have an immutable one.
        Users of an immutable reference don’t expect the values to suddenly change out from under them!
        However, multiple immutable references are okay because no one who is just reading the data has the ability to affect anyone else’s reading of the data.

    
    Dangling References

        In languages with pointers, it’s easy to erroneously create a dangling pointer.
        
        A pointer that references a location in memory that may have been given to someone else,
        by freeing some memory while preserving a pointer to that memory.
        
        In Rust, by contrast, the compiler guarantees that references will never be dangling references.
        
        If you have a reference to some data,
        the compiler will ensure that the data will not go out of scope before the reference to the data does.


            fn main() {
                let reference_to_nothing = dangle();
            }

            fn dangle() -> &String {
                let s = String::from("hello");
                &s
            }

        Here's the error

            error[E0106]: missing lifetime specifier
            = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
            = help: consider giving it a 'static lifetime

        Just return s intead of &s to avoid dangling problems.
        Ownership is moved out, and nothing is deallocated.

    
    Recap 

        At any given time, you can have either but not both of the following
        
            1. One mutable reference
            2. Any number of immutable references.

        References must always be valid.


    The Slice Data Type
 
        Return the reference to a part of (or completely) a string.
        
            //A function to return the index of the first word of a string.
            fn first_word(s: &String) -> usize {
                let bytes = s.as_bytes(); //convert our String to an array of bytes using the as_bytes method.
                
                for (i, &item) in bytes.iter().enumerate() {
                    if item == b' '
                    return i;
                }
                s.len()
            }

            fn main(){
                let mut s = String::from("hello world");
                let index = first_word(&s);

                s.clear();           
                println!("last index + 1 of the word is {index}"); //still prints 5 even though the string is gone.
            }

        In an alternate universe 

            //A function to return NOT the index of the first word of a string, But a REFERENCE to the first word.
            fn first_word(s: &String) -> &String {
                let bytes = s.as_bytes(); //convert our String to an array of bytes using the as_bytes method.
                
                for (i, &item) in bytes.iter().enumerate() {
                    if item == b' '
                    return &s[0..i];
                }

                return &s[..]
            }

            Test 1

                fn main(){
                    let mut s = String::from("hello world");
                    let index = first_word(&s);

                    s.clear();  //Error, Because a reference to the string is still used after it.
                    println!("last index + 1 of the word is {index}"); 
                }

            Test 2

                fn main(){
                    let mut s = String::from("hello world");
                    let index = first_word(&s);

                    println!("last index + 1 of the word is {index}"); //error. 
                    s.clear(); //No error as the references are not in use after it.
                }
        
        Slice syntax

            For array or vector

                let arr = [1, 2, 3, 4, 5];
                let slice = &arr[1..4]; // Slice from index 1 to 3 (4 is excluded)
                println!("{:?}", slice); // Output: [2, 3, 4]

            For string

                let s = String::from("Hello, world!");
                let slice = &s[0..5]; // Slice from index 0 to 4 (5 is excluded)
                println!("{}", slice); // Output: Hello

            Slice types: A slice in Rust can be of type &[T] (for arrays or vectors) or &str (for strings).
            
            Slices are references: A slice doesn't take ownership of the data, it just borrows it. This means the original data must live as long as the slice.

            [..] : All
            [i..] : From i till the end
            [..i] : From start till i-1 (i-1 included)

        
        String Literals are Slices

                let s = "Hello, world!";

            The type of s here is &str: it’s a slice pointing to that specific point of the binary.
            This is also why string literals are immutable; &str is an immutable reference.

            A more experienced Rustacean would write the signature as because it allows us to use the same function on both String and &str values.

                fn first_word(s: &str) -> &str {} //Good. Can use both &str and &String here.

                fn first_word(s: &str) -> &str {} //Bad. Can use only &String here.
        
            If we have a string slice, we can pass that directly. If we have a String, we can pass a slice of the entire String.
            
            Defining a function to take a string slice instead of a reference to a String makes our API more general and useful without losing any functionality

                fn main() {
                    let my_string = String::from("hello world");
                    let word = first_word(&my_string[..]); // first_word works on slices of `String`s    
                    
                    let my_string_literal = "hello world";
                    let word = first_word(&my_string_literal[..]); // first_word works on slices of string literals
                    
                    // Because string literals *are* string slices already,
                    
                    // this works too, without the slice syntax!
                    let word = first_word(my_string_literal);
                }

            

            
        